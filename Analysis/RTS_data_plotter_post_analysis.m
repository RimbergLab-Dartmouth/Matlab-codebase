m_power = 4;
m_flux = 1;
m_gate = 1;
m_detuning = 1;
m_repetition = 1;
plotting.plot_visible = 1;
plotting.save_png = 0;
plotting.save_fig = 0;
plotting.file_to_load_input_params_from = ['\\dartfs-hpc\rc\lab\R\RimbergA\cCPT_NR_project\Bhar_measurements\2022_December_Jules_sample\switching_rate_finder\data_230106\data\' ...
        'switching_finder_comprehensive_data.mat'];
load(post_run_params.file_to_load_input_params_from, 'input_params', 'post_run_analysis')
detuning_point = input_params.detunings(m_power, m_flux, m_gate, m_detuning, m_repetition);

temp.hist_RTS_bins = post_run_analysis.hist_RTS_bins(m_power, m_flux, m_gate, m_detuning, m_repetition, :);
temp.hist_count_data = post_run_analysis.hist_count_data(m_power, m_flux, m_gate, m_detuning, m_repetition, :);
temp.gaussian_1_theory_values = post_run_analysis.gaussian_1_theory_values(m_power, m_flux, m_gate, m_detuning, m_repetition,:);
temp.gaussian_2_theory_values = post_run_analysis.gaussian_2_theory_values(m_power, m_flux, m_gate, m_detuning, m_repetition,:);
temp.gaussian_1_mean = post_run_analysis.gaussian_1_mean(m_power, m_flux, m_gate, m_detuning, m_repetition);
temp.gaussian_2_mean = post_run_analysis.gaussian_2_mean(m_power, m_flux, m_gate, m_detuning, m_repetition);
temp.sigma_double_gaussian = post_run_analysis.sigma_double_gaussian(m_power, m_flux, m_gate, m_detuning, m_repetition);
temp.single_gaussian_fit_params = post_run_analysis.single_gaussian_fit_params(m_power, m_flux, m_gate, m_detuning, m_repetition, :);
temp.clean_time_data = post_run_analysis.RTS.clean_time_data(m_power, m_flux, m_gate, m_detuning, m_repetition, :);
raw_data.phase_extracted = post_run_analysis.RTS.raw_phase(m_power, m_flux, m_gate, m_detuning, m_repetition, :);
raw_data.time_corrected = post_run_analysis.RTS.time(m_power, m_flux, m_gate, m_detuning, m_repetition, :);
temp.raw_data_out = post_run_analysis.RTS.moving_mean_average_phase(m_power, m_flux, m_gate, m_detuning, m_repetition, :);
temp.clean_RTS_data = post_run_analysis.RTS.clean_RTS_phase(m_power, m_flux, m_gate, m_detuning, m_repetition, :);
%% Plotting Gaussian fits to RTS data
if plotting.plot_visible == 1
    RTS_Gaussians = figure('units', 'normalized', 'outerposition', [0 0 1 1]);
elseif plotting.plot_visible == 0    
    RTS_Gaussians = figure('units', 'normalized', 'outerposition', [0 0 1 1],'visible','off');
end
bar(temp.hist_RTS_bins, temp.hist_count_data, 'DisplayName', 'raw data')
hold on
if temp.double_gaussian_existence 
    plot(temp.hist_RTS_bins, temp.gaussian_1_theory_values,'r', 'linewidth', 3,'DisplayName', 'Gaussian 1 theory')
    plot(temp.hist_RTS_bins, temp.gaussian_2_theory_values,'k', 'linewidth', 3, 'DisplayName', 'Gaussian 2 theory')
end
plot(temp.hist_RTS_bins, temp.single_gaussian_theory_values,'g', 'linewidth', 3,'DisplayName', 'Single Gaussian theory')
xlabel('Phase ($^\circ$)', 'interpreter', 'latex')
ylabel('Count', 'interpreter', 'latex')
title(['RTS Gaussians for P$_{\mathrm{in}}$ = ' num2str(input_params.input_power_value_list(m_power)) 'dBm' 13 10 ...
'$n_g = $' num2str(input_params.ng_1_value_list(m_gate)) ', $\Phi_{\mathrm{ext}}$ = ' ...
num2str(input_params.flux_1_value_list(m_flux)) '$\Phi_0$' 13 10 ...
'$\Delta$ = ' num2str(detuning_point) 'MHz, ' ...
'Repetition number= ' num2str(m_repetition) 13 10 ...
'center gaussian 1 = ' num2str(round(temp.gaussian_1_mean, 2)) '$^\circ$, ' ...
'center gaussian 2 = ' num2str(round(temp.gaussian_2_mean, 2)) '$^\circ$, ' ...
'double gaussian $\sigma$ = ' num2str(round(temp.sigma_double_gaussian, 2)) '$^\circ$' 13 10 ...
'single gaussian center = ' num2str(round(temp.single_gaussian_fit_params(2), 2)) '$^\circ$', ...
'single gaussian $\sigma$ = ' num2str(round(temp.single_gaussian_fit_params(3), 2)) '$^\circ$'], 'interpreter', 'latex')
legend show

if plotting.save_png  == 1
    save_file_name = [post_run_params.rts_fig_directory num2str(m_power) '_' ...
        num2str(m_bias_point) '_' num2str(m_detuning) ...
        '_' num2str(m_repetition) ...
        '_' num2str(input_params.input_power_value_list(m_power)) 'dBm_' ...
        '_ng_' num2str(input_params.ng_1_value_list(m_gate)) '_flux_' ...
        num2str(input_params.flux_1_value_list(m_flux)*1000) 'm_detuning_' ...
        num2str(detuning_point) 'MHz_RTS_gaussian.png'];
    saveas(RTS_Gaussians, save_file_name)
    if plotting.save_fig 
        save_file_name = [post_run_params.rts_fig_directory '/fig_files/' num2str(m_power) '_' ...
        num2str(m_bias_point) '_' num2str(m_detuning) ...
        '_' num2str(m_repetition) ...
        '_' num2str(input_params.input_power_value_list(m_power)) 'dBm_' ...
        '_ng_' num2str(input_params.ng_1_value_list(m_gate)) '_flux_' ...
        num2str(input_params.flux_1_value_list(m_flux)*1000) 'm_detuning_' ...
        num2str(detuning_point) 'MHz_RTS_gaussian.fig'];
        saveas(RTS_Gaussians, save_file_name)
    end
end
clear RTS_Gaussians ...
  save_file_name     
%% Plotting a section of the RTS
if plotting.plot_visible == 1
    RTS_figure = figure('units', 'normalized', 'outerposition', [0 0 1 1]);
elseif plotting.plot_visible == 0    
    RTS_figure = figure('units', 'normalized', 'outerposition', [0 0 1 1],'visible','off');
end
plot(temp.clean_time_data(1,start_point : start_point + post_run_params.analysis.plotting_number_for_RTS)*1e6, ...
raw_data.phase_extracted(1,start_point : start_point + post_run_params.analysis.plotting_number_for_RTS), 'r', 'DisplayName', 'raw data')
hold on
plot(raw_data.time_corrected(1,start_point : start_point + post_run_params.analysis.plotting_number_for_RTS)*1e6, ...
squeeze(temp.raw_data_out(1, start_point : start_point + post_run_params.analysis.plotting_number_for_RTS)), ...
'b', 'DisplayName', 'moving averaged data')
plot(raw_data.time_corrected(1, start_point : start_point + post_run_params.analysis.plotting_number_for_RTS)*1e6, ...
squeeze(temp.clean_RTS_data(1, start_point : start_point + post_run_params.analysis.plotting_number_for_RTS)), ...
'k', 'linewidth', 3, 'DisplayName', 'cleaned data')
xlabel('Time ($\mu$s)', 'interpreter', 'latex')
ylabel('Phase($S_{21}) (^\circ$)', 'interpreter', 'latex')
title(['RTS for P$_{\mathrm{in}}$ = ' num2str(input_params.input_power_value_list(m_power)) 'dBm' 13 10 ...
'$n_g = $' num2str(input_params.ng_1_value_list(m_gate)) ', $\Phi_{\mathrm{ext}}$ = ' ...
num2str(input_params.flux_1_value_list(m_flux)) '$\Phi_0$' 13 10 ...
        '$\Delta$ = ' num2str(detuning_point) 'MHz, ' ...
'Repetition number= ' num2str(m_repetition)], 'interpreter', 'latex')
legend show

if plotting.save_png  == 1
    save_file_name = [post_run_params.rts_fig_directory num2str(m_power) '_' ...
        num2str(m_bias_point) '_' num2str(m_detuning) ...
        '_' num2str(m_repetition) ...
        '_' num2str(input_params.input_power_value_list(m_power)) 'dBm_' ...
        '_ng_' num2str(input_params.ng_1_value_list(m_gate)) '_flux_' ...
        num2str(input_params.flux_1_value_list(m_flux)*1000) 'm_detuning_' ...
        num2str(detuning_point) 'MHz_RTS_signal.png'];
    saveas(RTS_figure, save_file_name)
    if plotting.save_fig  == 1
        save_file_name = [post_run_params.rts_fig_directory '/fig_files/' num2str(m_power) '_' ...
        num2str(m_bias_point) '_' num2str(m_detuning) ...
        '_' num2str(m_repetition) ...
        '_' num2str(input_params.input_power_value_list(m_power)) 'dBm_' ...
        '_ng_' num2str(input_params.ng_1_value_list(m_gate)) '_flux_' ...
        num2str(input_params.flux_1_value_list(m_flux)*1000) 'm_detuning_' ...
        num2str(detuning_point) 'MHz_RTS_signal_sample.fig'];
        saveas(RTS_figure, save_file_name)
    end
end

clear RTS_figure ...
  save_file_name ...
  start_point